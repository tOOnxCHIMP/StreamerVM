
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\002" +
    "\000\002\010\005\000\002\010\003\000\002\011\013\000" +
    "\002\012\005\000\002\012\003\000\002\013\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\015\000\002\005" +
    "\014\000\002\005\007\000\002\005\006\000\002\005\005" +
    "\000\002\005\005\000\002\005\012\000\002\005\007\000" +
    "\002\005\006\000\002\005\007\000\002\005\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\006\000\002\006\006\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\004\000\002\006\005\000\002" +
    "\006\006\000\002\006\005\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\056\002\ufffe\015\ufffe\023\ufffe\037\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\004\054\ufffe\056" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\001\002\000\014" +
    "\037\023\040\031\041\036\042\013\043\015\001\002\000" +
    "\004\002\174\001\002\000\054\002\ufffc\015\020\023\017" +
    "\037\023\040\031\041\036\042\013\043\015\044\024\045" +
    "\032\046\033\047\012\050\011\051\034\052\022\054\025" +
    "\056\037\061\021\062\030\063\026\064\035\001\002\000" +
    "\056\002\ufffe\015\ufffe\023\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\053\004\054\ufffe\056\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\064\ufffe\001\002\000\054\002\uffff\015" +
    "\uffff\023\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052" +
    "\uffff\054\uffff\056\uffff\061\uffff\062\uffff\063\uffff\064\uffff" +
    "\001\002\000\022\015\020\023\017\044\024\045\032\047" +
    "\012\062\030\063\026\064\035\001\002\000\022\015\020" +
    "\023\017\044\024\045\032\047\012\062\030\063\026\064" +
    "\035\001\002\000\010\017\uffd0\020\uffd0\063\uffd0\001\002" +
    "\000\032\004\166\006\053\007\047\010\055\011\051\012" +
    "\052\013\050\014\060\016\056\027\054\034\165\035\057" +
    "\001\002\000\004\017\162\001\002\000\006\017\144\063" +
    "\143\001\002\000\022\015\020\023\017\044\024\045\032" +
    "\047\012\062\030\063\026\064\035\001\002\000\022\015" +
    "\020\023\017\044\024\045\032\047\012\062\030\063\026" +
    "\064\035\001\002\000\022\015\020\023\017\044\024\045" +
    "\032\047\012\062\030\063\026\064\035\001\002\000\004" +
    "\023\133\001\002\000\010\017\uffd3\020\uffd3\063\uffd3\001" +
    "\002\000\044\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\016\uffd6\024\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\034\uffd6\035\uffd6\036\uffd6\001\002" +
    "\000\004\025\121\001\002\000\052\004\uffd8\005\110\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\016\uffd8\024\uffd8\025\107\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\033\111\034\uffd8\035\uffd8\036\uffd8\001\002\000\004" +
    "\002\001\001\002\000\044\004\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7\024\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\001\002\000\010\017\uffd2\020\uffd2\063\uffd2\001\002" +
    "\000\044\004\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\016\uffd5\024\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\034\uffd5\035\uffd5\036\uffd5\001\002\000" +
    "\022\015\020\023\017\044\024\045\032\047\012\062\030" +
    "\063\026\064\035\001\002\000\052\015\020\023\017\037" +
    "\023\040\031\041\036\042\013\043\015\044\024\045\032" +
    "\046\033\047\012\050\011\051\034\052\022\054\025\056" +
    "\037\061\021\062\030\063\026\064\035\001\002\000\044" +
    "\004\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\016\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\034\uffd4\035\uffd4\036\uffd4\001\002\000\010\017" +
    "\uffd1\020\uffd1\063\uffd1\001\002\000\004\025\042\001\002" +
    "\000\056\002\ufffc\015\020\023\017\024\ufffc\037\023\040" +
    "\031\041\036\042\013\043\015\044\024\045\032\046\033" +
    "\047\012\050\011\051\034\052\022\054\025\056\037\061" +
    "\021\062\030\063\026\064\035\001\002\000\006\002\ufffd" +
    "\024\ufffd\001\002\000\014\037\023\040\031\041\036\042" +
    "\013\043\015\001\002\000\004\063\044\001\002\000\004" +
    "\032\045\001\002\000\022\015\020\023\017\044\024\045" +
    "\032\047\012\062\030\063\026\064\035\001\002\000\030" +
    "\006\053\007\047\010\055\011\051\012\052\013\050\014" +
    "\060\016\056\026\061\027\054\035\057\001\002\000\022" +
    "\015\020\023\017\044\024\045\032\047\012\062\030\063" +
    "\026\064\035\001\002\000\022\015\020\023\017\044\024" +
    "\045\032\047\012\062\030\063\026\064\035\001\002\000" +
    "\022\015\020\023\017\044\024\045\032\047\012\062\030" +
    "\063\026\064\035\001\002\000\022\015\020\023\017\044" +
    "\024\045\032\047\012\062\030\063\026\064\035\001\002" +
    "\000\022\015\020\023\017\044\024\045\032\047\012\062" +
    "\030\063\026\064\035\001\002\000\022\015\020\023\017" +
    "\044\024\045\032\047\012\062\030\063\026\064\035\001" +
    "\002\000\022\015\020\023\017\044\024\045\032\047\012" +
    "\062\030\063\026\064\035\001\002\000\022\015\020\023" +
    "\017\044\024\045\032\047\012\062\030\063\026\064\035" +
    "\001\002\000\022\015\020\023\017\044\024\045\032\047" +
    "\012\062\030\063\026\064\035\001\002\000\022\015\020" +
    "\023\017\044\024\045\032\047\012\062\030\063\026\064" +
    "\035\001\002\000\004\023\062\001\002\000\054\015\020" +
    "\023\017\024\ufffc\037\023\040\031\041\036\042\013\043" +
    "\015\044\024\045\032\046\033\047\012\050\011\051\034" +
    "\052\022\054\025\056\037\061\021\062\030\063\026\064" +
    "\035\001\002\000\004\024\064\001\002\000\056\002\ufff2" +
    "\015\ufff2\023\ufff2\024\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\054\ufff2\056\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\001\002\000\044\004\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\050\014\060\016\056\024" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\034\uffde\035\uffde" +
    "\036\uffde\001\002\000\030\006\053\007\047\010\055\011" +
    "\051\012\052\013\050\014\060\016\056\027\054\035\057" +
    "\036\067\001\002\000\044\004\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\024\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\001\002\000\044\004\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\050\014\060\016\056\024\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\001\002\000\044\004\uffe1\006\uffe1\007\uffe1\010\055\011" +
    "\051\012\052\013\050\014\060\016\056\024\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\034\uffe1\035\uffe1\036\uffe1\001" +
    "\002\000\030\006\053\007\047\010\055\011\051\012\052" +
    "\013\050\014\060\016\056\027\054\030\073\035\057\001" +
    "\002\000\044\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\016\uffe3\024\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002" +
    "\000\044\004\uffe7\006\uffe7\007\uffe7\010\055\011\051\012" +
    "\052\013\050\014\060\016\056\024\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\034\uffe7\035\uffe7\036\uffe7\001\002\000" +
    "\044\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\052" +
    "\013\050\014\060\016\056\024\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\034\uffe0\035\uffe0\036\uffe0\001\002\000\044" +
    "\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\051\012\052\013" +
    "\050\014\060\016\056\024\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\034\uffe2\035\uffe2\036\uffe2\001\002\000\044\004" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\050" +
    "\014\060\016\056\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\001\002\000\044\004\uffe5" +
    "\006\uffe5\007\uffe5\010\055\011\051\012\052\013\050\014" +
    "\060\016\056\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\001\002\000\004\023\102\001" +
    "\002\000\054\015\020\023\017\024\ufffc\037\023\040\031" +
    "\041\036\042\013\043\015\044\024\045\032\046\033\047" +
    "\012\050\011\051\034\052\022\054\025\056\037\061\021" +
    "\062\030\063\026\064\035\001\002\000\004\024\104\001" +
    "\002\000\056\002\ufff1\015\ufff1\023\ufff1\024\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\056\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\001\002\000\030\004" +
    "\106\006\053\007\047\010\055\011\051\012\052\013\050" +
    "\014\060\016\056\027\054\035\057\001\002\000\056\002" +
    "\ufff4\015\ufff4\023\ufff4\024\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\054\ufff4\056\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\001\002\000\022\015\020\023\017\044" +
    "\024\045\032\047\012\062\030\063\026\064\035\001\002" +
    "\000\022\015\020\023\017\044\024\045\032\047\012\062" +
    "\030\063\026\064\035\001\002\000\022\015\020\023\017" +
    "\044\024\045\032\047\012\062\030\063\026\064\035\001" +
    "\002\000\044\004\uffda\006\053\007\047\010\055\011\051" +
    "\012\052\013\050\014\060\016\056\024\uffda\026\uffda\027" +
    "\054\030\uffda\031\uffda\034\uffda\035\057\036\uffda\001\002" +
    "\000\044\004\uffe8\006\053\007\047\010\055\011\051\012" +
    "\052\013\050\014\060\016\056\024\uffe8\026\uffe8\027\054" +
    "\030\uffe8\031\uffe8\034\uffe8\035\057\036\uffe8\001\002\000" +
    "\004\026\120\001\002\000\034\006\053\007\047\010\055" +
    "\011\051\012\052\013\050\014\060\016\056\024\ufffa\026" +
    "\ufffa\027\054\031\116\035\057\001\002\000\022\015\020" +
    "\023\017\044\024\045\032\047\012\062\030\063\026\064" +
    "\035\001\002\000\006\024\ufffb\026\ufffb\001\002\000\044" +
    "\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\016\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\034\uffdb\035\uffdb\036\uffdb\001\002\000\022\015" +
    "\020\023\017\044\024\045\032\047\012\062\030\063\026" +
    "\064\035\001\002\000\030\006\053\007\047\010\055\011" +
    "\051\012\052\013\050\014\060\016\056\026\123\027\054" +
    "\035\057\001\002\000\004\023\124\001\002\000\054\015" +
    "\020\023\017\024\ufffc\037\023\040\031\041\036\042\013" +
    "\043\015\044\024\045\032\046\033\047\012\050\011\051" +
    "\034\052\022\054\025\056\037\061\021\062\030\063\026" +
    "\064\035\001\002\000\004\024\126\001\002\000\004\055" +
    "\127\001\002\000\004\023\130\001\002\000\054\015\020" +
    "\023\017\024\ufffc\037\023\040\031\041\036\042\013\043" +
    "\015\044\024\045\032\046\033\047\012\050\011\051\034" +
    "\052\022\054\025\056\037\061\021\062\030\063\026\064" +
    "\035\001\002\000\004\024\132\001\002\000\056\002\ufff3" +
    "\015\ufff3\023\ufff3\024\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\054\ufff3\056\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\001\002\000\054\015\020\023\017\024\ufffc" +
    "\037\023\040\031\041\036\042\013\043\015\044\024\045" +
    "\032\046\033\047\012\050\011\051\034\052\022\054\025" +
    "\056\037\061\021\062\030\063\026\064\035\001\002\000" +
    "\004\024\135\001\002\000\056\002\ufff0\015\ufff0\023\ufff0" +
    "\024\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\054\ufff0\056\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\001" +
    "\002\000\030\004\137\006\053\007\047\010\055\011\051" +
    "\012\052\013\050\014\060\016\056\027\054\035\057\001" +
    "\002\000\056\002\uffef\015\uffef\023\uffef\024\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\054\uffef\056\uffef" +
    "\061\uffef\062\uffef\063\uffef\064\uffef\001\002\000\044\004" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\050" +
    "\014\060\016\056\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\001\002\000\004\024\142" +
    "\001\002\000\044\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\024\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\034\uffdc\035\uffdc\036\uffdc\001" +
    "\002\000\010\004\153\005\155\033\154\001\002\000\014" +
    "\037\023\040\031\041\036\042\013\043\015\001\002\000" +
    "\004\020\146\001\002\000\004\063\147\001\002\000\004" +
    "\005\150\001\002\000\022\015\020\023\017\044\024\045" +
    "\032\047\012\062\030\063\026\064\035\001\002\000\030" +
    "\004\152\006\053\007\047\010\055\011\051\012\052\013" +
    "\050\014\060\016\056\027\054\035\057\001\002\000\056" +
    "\002\uffed\015\uffed\023\uffed\024\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\054\uffed\056\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\001\002\000\056\002\uffe9\015\uffe9" +
    "\023\uffe9\024\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\054\uffe9\056\uffe9\061\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\001\002\000\022\015\020\023\017\044\024\045\032" +
    "\047\012\062\030\063\026\064\035\001\002\000\022\015" +
    "\020\023\017\044\024\045\032\047\012\062\030\063\026" +
    "\064\035\001\002\000\030\004\157\006\053\007\047\010" +
    "\055\011\051\012\052\013\050\014\060\016\056\027\054" +
    "\035\057\001\002\000\056\002\uffec\015\uffec\023\uffec\024" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\054" +
    "\uffec\056\uffec\061\uffec\062\uffec\063\uffec\064\uffec\001\002" +
    "\000\030\004\161\006\053\007\047\010\055\011\051\012" +
    "\052\013\050\014\060\016\056\027\054\035\057\001\002" +
    "\000\056\002\uffea\015\uffea\023\uffea\024\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\054\uffea\056\uffea\061" +
    "\uffea\062\uffea\063\uffea\064\uffea\001\002\000\014\037\023" +
    "\040\031\041\036\042\013\043\015\001\002\000\004\020" +
    "\164\001\002\000\010\017\uffcf\020\uffcf\063\uffcf\001\002" +
    "\000\022\015\020\023\017\044\024\045\032\047\012\062" +
    "\030\063\026\064\035\001\002\000\056\002\ufff5\015\ufff5" +
    "\023\ufff5\024\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\054\ufff5\056\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\001\002\000\030\004\170\006\053\007\047\010\055" +
    "\011\051\012\052\013\050\014\060\016\056\027\054\035" +
    "\057\001\002\000\056\002\uffeb\015\uffeb\023\uffeb\024\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb" +
    "\056\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\001\002\000" +
    "\044\004\uffd9\006\053\007\047\010\055\011\051\012\052" +
    "\013\050\014\060\016\056\024\uffd9\026\uffd9\027\054\030" +
    "\uffd9\031\uffd9\034\uffd9\035\057\036\uffd9\001\002\000\030" +
    "\004\173\006\053\007\047\010\055\011\051\012\052\013" +
    "\050\014\060\016\056\027\054\035\057\001\002\000\056" +
    "\002\uffee\015\uffee\023\uffee\024\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\054\uffee\056\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\001\002\000\004\002\000\001\002" +
    "\000\004\063\176\001\002\000\004\025\177\001\002\000" +
    "\014\037\023\040\031\041\036\042\013\043\015\001\002" +
    "\000\004\026\206\001\002\000\004\063\205\001\002\000" +
    "\006\026\ufff7\031\203\001\002\000\014\037\023\040\031" +
    "\041\036\042\013\043\015\001\002\000\004\026\ufff8\001" +
    "\002\000\006\026\ufff6\031\ufff6\001\002\000\004\023\207" +
    "\001\002\000\054\015\020\023\017\024\ufffc\037\023\040" +
    "\031\041\036\042\013\043\015\044\024\045\032\046\033" +
    "\047\012\050\011\051\034\052\022\054\025\056\037\061" +
    "\021\062\030\063\026\064\035\001\002\000\004\024\211" +
    "\001\002\000\056\002\ufff9\015\ufff9\023\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\056" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\010\002\004\003\005\011\006\001\001\000" +
    "\004\007\174\001\001\000\002\001\001\000\012\004\026" +
    "\005\037\006\013\007\015\001\001\000\006\003\007\011" +
    "\006\001\001\000\002\001\001\000\004\006\171\001\001" +
    "\000\004\006\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\114" +
    "\010\140\001\001\000\004\006\137\001\001\000\004\006" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\104\001\001\000\010\005\100\006\013\007" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\040\005\037\006\013\007\015\001" +
    "\001\000\002\001\001\000\004\007\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\045\001\001\000" +
    "\002\001\001\000\004\006\077\001\001\000\004\006\076" +
    "\001\001\000\004\006\075\001\001\000\004\006\074\001" +
    "\001\000\004\006\073\001\001\000\004\006\071\001\001" +
    "\000\004\006\070\001\001\000\004\006\067\001\001\000" +
    "\004\006\065\001\001\000\004\006\064\001\001\000\002" +
    "\001\001\000\012\004\062\005\037\006\013\007\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\102" +
    "\005\037\006\013\007\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\114\010\113\001\001\000\004\006\112\001\001\000" +
    "\004\006\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\114\010" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\124\005\037\006\013\007\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\130\005\037\006\013\007\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\133\005\037\006\013\007" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\157\001\001\000" +
    "\004\006\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\200\012\177\013\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\200\012" +
    "\203\013\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\207\005\037\006\013\007" +
    "\015\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol lastToken) {
    System.err.println("Syntax error at  " +
                       "Line: " + lastToken.left + "   " +
                       "Column: " + lastToken.right);
}

public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    done_parsing();
    System.exit(1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= func_list stmt_list 
            {
              ProgramNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionListNode f = (FunctionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Program parsed!");
        RESULT = new ProgramNode(f, s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_list ::= func func_list 
            {
              FunctionListNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionNode f = (FunctionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionListNode fl = (FunctionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	  System.err.println("function list parsed");
	  fl.addStatement(f);
          RESULT = fl;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // func_list ::= 
            {
              FunctionListNode RESULT =null;
		
        System.err.println("Empty Function list parsed!");
        RESULT = new FunctionListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt stmt_list 
            {
              StatementListNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementListNode l = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Statement list parsed!");
        /* Add statement at position 0; it should be at the *front* of the list */
        l.addStatement(s, 0);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= 
            {
              StatementListNode RESULT =null;
		
        System.err.println("Empty statement list parsed!");
        RESULT = new StatementListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_list ::= expr COMMA expr_list 
            {
              ListExpressionNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode s = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListExpressionNode el = (ListExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("expr in list parsed!");
        /* Add statement at position 0; it should be at the *front* of the list */
        el.addStatement(s, 0);
        RESULT = el;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_list ::= expr 
            {
              ListExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("String in ExpressionList Parsed");
        RESULT = new ListExpressionNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func ::= FUNC type ID OPENPAREN param_list CLOSEPAREN OPENCURLY stmt_list CLOSECURLY 
            {
              FunctionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParamListNode p = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	  System.err.println("function list parsed");
	  RESULT = new FunctionNode(i, s, p, t);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // param_list ::= param COMMA param_list 
            {
              ParamListNode RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamNode p1 = (ParamNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamListNode p = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("expr in list parsed!");
        /* Add statement at position 0; it should be at the *front* of the list */
        p.addStatement(p1, 0);
        RESULT = p;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_list ::= param 
            {
              ParamListNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamNode e = (ParamNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("String in ExpressionList Parsed");
        RESULT = new ParamListNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param ::= type ID 
            {
              ParamNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Statement parsed as expression!");
        RESULT = new ParamNode(i,t);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as expression!");
        RESULT = new ExpressionStatementNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= PRINT expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as print!");
        RESULT = new PrintStatementNode(e);

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= IF OPENPAREN expr CLOSEPAREN OPENCURLY stmt_list CLOSECURLY ELSE OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s1 = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as print!");
        RESULT = new IfStatementNode(e, s, s1);

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= FOR OPENPAREN type ID COLON expr CLOSEPAREN OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as print!");
        RESULT = new ForStatementNode(t,e,e2,s);

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= UNTIL stmt OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StatementNode e = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as until!");
        RESULT = new UntilStatementNode( e,s );

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= ERROR OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s1 = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		System.err.println("Statement parsed as stmt_list");
		RESULT = new ErrorListNode(s1);
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= RETURN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode i = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		System.err.println("Statement parsed as stmt_list");
		RESULT = new ReturnStatementNode(i);
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= EXIT expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as print!");
        RESULT = new ExitStatementNode(e);

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= type LT type GT ID ASSIGN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeNode t2 = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration assignment!");
         AssignExpressionNode assignment = new AssignExpressionNode(i, e);
        RESULT = new DeclarationStatementNode(t, i, assignment);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= type ID ASSIGN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration assignment!");		  AssignExpressionNode assignment = new AssignExpressionNode(i, e);
        RESULT = new DeclarationStatementNode(t, i, assignment);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= expr WRITEFILE expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode i = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration assignment!");		  
        RESULT = new WriteStatementNode(i,e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= type ID READFILE expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration assignment!");		  FileInExpressionNode assignment = new FileInExpressionNode(i, e);
    	   RESULT = new DeclarationStatementNode(t, i, assignment);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= type ID SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration!");
        RESULT = new DeclarationStatementNode(t, i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= ID ASSIGN expr 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as assignment!");
        RESULT = new AssignExpressionNode(i, e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr PLUS expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as plus!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "+");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr EQUALS expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as equals!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "==");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MINUS expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as minus!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "-");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr OPENFILTER expr CLOSEFILTER 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode i = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode n = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as minus!");
        RESULT = new ListFilterNode(i, n);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr OPENSQBRACE expr CLOSESQBRACE 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode i = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode n = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as minus!");
        RESULT = new ListAccessNode(i, n);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr DIVIDE expr 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as Divide!");
        RESULT = new BinaryOpExpressionNode(e, e2, "/");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr TIMES expr 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as Times!");
        RESULT = new BinaryOpExpressionNode(e, e2, "*");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr MOD expr 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as Modulus!");
        RESULT = new BinaryOpExpressionNode(e, e2, "%");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr AND expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as AND!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "&&");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr OR expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as Or!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "||");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= NOT expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as Not!");
        RESULT = new NotOpExpressionNode(e1, "!");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= OPENCURLY expr_list CLOSECURLY 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListExpressionNode e1 = (ListExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as ExpressionList!");
       	RESULT = e1;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= ID OPENPAREN expr_list CLOSEPAREN 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListExpressionNode e1 = (ListExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Function Call parsed");
       	RESULT = new FunctionCallNode(e, e1);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= ID READFILE expr 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Statement parsed as a declaration assignment!");		  RESULT = new FileInExpressionNode(i, e);
        
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= INPUT expr 
            {
              ExpressionNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode q = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Function Call parsed");
       	RESULT = new InputExpressionNode(q);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= ID 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as ID!");
        RESULT = new IdExpressionNode(i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= NUM 
            {
              ExpressionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as NUM!");
        RESULT = new NumExpressionNode(n);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= TRUE 
            {
              ExpressionNode RESULT =null;
		
        System.err.println("Expression parsed as True!");
      	 RESULT = new TrueExpressionNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= FALSE 
            {
              ExpressionNode RESULT =null;
		
        System.err.println("Expression parsed as False!");
        RESULT = new FalseExpressionNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= QSTRING 
            {
              ExpressionNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as QString!");
        RESULT = new QstringExpressionNode(q);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= NUMTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as NUM!");
        RESULT = new TypeNode("num");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= TEXTTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as TEXT!");
        RESULT = new TypeNode("text");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= BOOLTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as BOOL!");
        RESULT = new TypeNode("bool");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= VOIDTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as VOID!");
        RESULT = new TypeNode("void");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= LISTTYPE LT type GT 
            {
              TypeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Type parsed as LIST!");
        RESULT = new ListTypeNode(t);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
